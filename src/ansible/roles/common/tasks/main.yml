- name: Set data path
  set_fact:
    data_path: '{{ role_path }}/../../../../data'

- name: Check if we are running in image mode
  stat:
    path: /usr/bin/rpm-ostree
  register: rpm_ostree

- name: Set /usr/bin/python to python3
  alternatives:
    name: python
    link: /usr/bin/python
    path: /usr/bin/python3
  when:
  - not rpm_ostree.stat.exists

- name: Create /etc/sudoers
  template:
    src: sudoers
    dest: /etc/sudoers
    owner: root
    group: root
    mode: 0600

- name: Create /var/data
  file:
    path: '/var/data'
    state: directory
    mode: 0700

# Backward compatibility symlink
- name: Create symlink /data /var/data
  ansible.builtin.file:
    src: '/var/data'
    dest: '/data'
    state: link
    owner: root
    group: root
  when:
  - not rpm_ostree.stat.exists

- name: Copy common data
  synchronize:
    src: '{{ data_path }}/'
    dest: /var/data/

# synchronize rsync option --chown was ignored for some reason
- name: Set correct permissions on /var/data
  shell: |
    chown -R root:root /var/data
    chmod -R 0755 /var/data
    chmod 0600 $(find /var/data -type f)
    chmod 0644 /var/data/certs/*.crt

- name: Set SELinux label for /var/data
  shell: |
    if selinuxenabled; then
      semanage fcontext -a -t etc_t "/var/data(/.*)*"
      restorecon -R -v /var/data
    else
      exit 0
    fi

- name: 'Change root password'
  user:
    name: root
    update_password: always
    password: '{{ user.root.password | password_hash("sha512") }}'

- name: 'Create /root/.ssh directory'
  file:
    path: '/root/.ssh'
    state: directory
    mode: 0700

- name: Copy root user ssh keys
  copy:
    src: '{{ data_path }}/ssh-keys/{{ item.src }}'
    dest: '/root/.ssh/{{ item.dest }}'
    owner: 'root'
    group: 'root'
    mode: '0600'
  with_items:
  - { src: 'root.id_rsa', dest: 'id_rsa' }
  - { src: 'root.id_rsa.pub', dest: 'id_rsa.pub' }

- name: Append or create authorized_keys
  lineinfile:
    dest: "/root/.ssh/authorized_keys"
    line: "{{ lookup('file', '{{ data_path }}/ssh-keys/root.id_rsa.pub') }}"
    create: yes
    state: present
    owner: 'root'
    group: 'root'
    mode: '0600'

- name: 'Create wheel group'
  group:
    name: wheel
    system: yes
    state: present

- name: 'Check if user with uid {{ user.regular.uid }} already exists'
  shell: |
    getent passwd {{ user.regular.uid }} | cut -d ':' -f 1
  register: regular_user_check

- name: 'Remove regular user with uid {{ user.regular.uid }} to avoid conflicts'
  user:
    name: '{{ regular_user_check.stdout }}'
    state: absent
    remove: yes
    force: yes
  when: regular_user_check.stdout | length > 0 and regular_user_check.stdout != user.regular.name

- name: 'Create {{ user.regular.name }} user'
  user:
    name: '{{ user.regular.name }}'
    uid: '{{ user.regular.uid }}'
    groups: wheel
    append: yes
    shell: /usr/bin/bash
    password: '{{ user.regular.password | password_hash("sha512") }}'

- name: 'Create /home/{{ user.regular.name }}/.ssh directory'
  file:
    path: '/home/{{ user.regular.name }}/.ssh'
    state: directory
    mode: 0700

- name: Copy ci user ssh keys
  copy:
    src: '{{ data_path }}/ssh-keys/{{ item.src }}'
    dest: '/home/{{ user.regular.name }}/.ssh/{{ item.dest }}'
    owner: '{{ user.regular.name }}'
    group: '{{ user.regular.name }}'
    mode: '0600'
  with_items:
  - { src: 'ci.id_rsa', dest: 'id_rsa' }
  - { src: 'ci.id_rsa.pub', dest: 'authorized_keys' }
  - { src: 'ci.id_rsa.pub', dest: 'id_rsa.pub' }

- name: Copy CA certificate to local pki anchors
  copy:
    src: /var/data/certs/ca.crt
    dest: "{{ ca_trust_dir }}"
    remote_src: yes

- name: Update system CA trusts to pick up new certificate
  command: "{{ ca_trust_update }}"
