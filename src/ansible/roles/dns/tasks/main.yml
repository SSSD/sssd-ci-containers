- name: Gather facts
  ansible.builtin.setup:

- name: Add fqdn and short hostname to /etc/hosts
  ansible.builtin.lineinfile:
    line: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} \
      {{ inventory_hostname }} {{ inventory_hostname.split('.')[0] }}"
    path: /etc/hosts
  when: ansible_os_family != "Windows"
  become: true

- name: Setup dns (on dns machine)
  block:
  - name: Install dnsmasq package
    ansible.builtin.package:
      name:
      - dnsmasq
      state: present

  - name: Place dnsmasq config
    ansible.builtin.template:
      src: etc.dnsmasq.conf.j2
      dest: /etc/dnsmasq.conf
      owner: root
      group: root
      mode: 0600
    register: config

  - name: Show dnsmasq templating results
    ansible.builtin.debug:
      msg: "{{ lookup('ansible.builtin.template', 'etc.dnsmasq.conf.j2') }}"

  - name: Gather the package facts
    ansible.builtin.package_facts:

  - name: Create dnsmasq.service.d if needed
    ansible.builtin.file:
      path: /etc/systemd/system/dnsmasq.service.d/
      state: directory
      recurse: yes
      owner: root
      group: root

  - name: Force dnsmasq before systemd-resolved
    copy:
      content: |
        [Unit]
        After=systemd-resolved.service
        [Service]
        ExecStartPre=/usr/bin/systemctl stop systemd-resolved.service
        ExecStartPost=/usr/bin/systemctl start systemd-resolved.service
      dest: /etc/systemd/system/dnsmasq.service.d/resolved-fix.conf
      owner: root
      group: root
      mode: '0644'
    when: "'systemd-resolved' in ansible_facts.packages"

  - name: Restart systemd-resolved (if present)
    ansible.builtin.systemd_service:
      name: systemd-resolved
      daemon_reload: true
      state: restarted
    when: "'systemd-resolved' in ansible_facts.packages"

  - name: Restart dnsmasq service
    ansible.builtin.systemd_service:
      name: dnsmasq
      enabled: true
      daemon_reload: true
      state: restarted

  when: "'dns' in group_names"
  become: true
