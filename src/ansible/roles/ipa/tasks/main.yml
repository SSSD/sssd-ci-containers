- name: Configure IPA IP address (from metadata)
  set_fact:
    ipa_ip: "{{ hostvars[inventory_hostname]['meta_ip'] }}"
  when: '"meta_ip" in hostvars[inventory_hostname]'

- name: Configure IPA IP address (from ssh)
  set_fact:
    ipa_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
  when: '"meta_ip" not in hostvars[inventory_hostname]'

- name: Install IPA server
  shell: |
    set -e

    alias install-ipa="/usr/sbin/ipa-server-install --unattended \
      --realm={{ service.ipa.domain | upper | quote }}           \
      --domain={{ service.ipa.domain | quote }}                  \
      --netbios-name={{ service.ipa.netbios | quote }}           \
      --ds-password={{ service.ipa.password | quote }}           \
      --admin-password={{ service.ipa.password | quote }}        \
      --setup-dns                                                \
      --ip-address={{ ipa_ip | quote }}                          \
      --setup-adtrust                                            \
      --auto-forwarders                                          \
      --auto-reverse                                             \
      --no-dnssec-validation                                     \
      --no-host-dns                                              \
      --no-ntp"

    install-ipa --external-ca

    openssl x509 -days 7200 -req                                 \
      -extfile /data/configs/openssl_sign_ca.ext                 \
      -CA "/data/certs/ca.crt"                                   \
      -CAkey "/data/certs/ca.key"                                \
      --CAcreateserial                                           \
      -in "/root/ipa.csr"                                        \
      -out "/root/ipa.crt"

    install-ipa                                                  \
      --external-cert-file=/root/ipa.crt                         \
      --external-cert-file=/data/certs/ca.crt
  args:
    creates: /etc/ipa/default.conf

- name: Remove auto.master and auto.direct maps
  shell: |
    kinit admin
    ipa automountmap-del default auto.master
    ipa automountmap-del default auto.direct
  args:
    stdin: '{{ service.ipa.password }}'
  register: automountmapdel
  failed_when:
  - 'automountmapdel.rc != 0 and "automount map not found" not in automountmapdel.stderr'

- name: Create pw-never-expires group
  shell: |
    kinit admin
    ipa group-add pw-never-expires
  args:
    stdin: '{{ service.ipa.password }}'
  register: pwneverexpires
  failed_when:
  - 'pwneverexpires.rc != 0 and "already exists" not in pwneverexpires.stderr'

- name: Create pw-never-expires password policy
  shell: |
    kinit admin
    ipa pwpolicy-add pw-never-expires --maxlife=0 --minlife=0 --priority=0
  args:
    stdin: '{{ service.ipa.password }}'
  register: policy
  failed_when:
  - 'policy.rc != 0 and "already used by pw-never-expires" not in policy.stderr'

- name: Add admin to pw-never-expires group
  shell: |
    kinit admin
    ipa group-add-member pw-never-expires --users=admin
  args:
    stdin: '{{ service.ipa.password }}'
  register: member
  failed_when:
  - 'member.rc != 0 and "This entry is already a member" not in member.stdout'

- name: Reset admin password to apply pw-never-expires policy
  shell: |
    kinit admin
    ipa user-mod admin --password
  args:
    stdin: |
      {{ service.ipa.password }}
      {{ service.ipa.password }}

- name: 'Check trust with other domains'
  shell: |
    kinit admin
    ipa trust-find
  args:
    stdin: |
      {{ service.ipa.password }}
  register: trust
  failed_when: False

- name: 'Setup trust with {{ service.samba.domain }}'
  shell: |
    kinit admin
    ipa trust-add {{ service.samba.domain | quote }} --admin Administrator --password
  args:
    stdin: |
      {{ service.ipa.password }}
      {{ service.samba.password }}
  when:
  - 'service.samba.domain not in trust.stdout'
  - join_samba
  - trust_ipa_samba

- name: 'Setup trust with {{ service.ad.domain }}'
  shell: |
    kinit admin
    ipa trust-add {{ service.ad.domain | quote }} --admin Administrator --password
  args:
    stdin: |
      {{ service.ad.safe_password }}
      {{ service.ad.safe_password }}
  when:
  - 'service.ad.domain not in trust.stdout'
  - join_ad
  - trust_ipa_ad
